@page "/create-post"
@using Forum.Contracts.Common;
@using Forum.Contracts.Post;
@using Forum.Contracts.Tags;
@using Forum.Server.Common.Interfaces;
@using MudBlazor
@using System.Net.Http.Headers;
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDialogService DialogService
@inject ITokenStorageService TokenStorageService
@inject NavigationManager NavigationManager

<style>
    .container-content {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 16px;
    }

    .item {
        padding: 16px;
        background-color: #f2f2f2;
        border-radius: 4px;
    }

    .autocomplete-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .button-container {
        display: flex;
        gap: 16px;
    }
</style>


<MudForm>
    <MudGrid Justify="Justify.Center" Spacing="2">
        <MudItem xs="12" lg="10">
            <MudPaper Class="pa-1 mb-n1" Outlined="true">
                <MudTextField T="string"
                @bind-Value="@postTitle"
                              Counter="150"
                              Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                              Label="Title"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Class="pa-3 mb-n4" />
                <MudTextField T="string"
                @bind-Value="@postContent"
                              Class="px-3"
                              Lines="5"
                              Counter="8192"
                              Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersContent))"
                              Label="Write something mysterious"
                              Variant="Variant.Filled" />
                <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
                    <MudContainer>
                        <MudTextField T="string"
                                      Value="@searchText"
                                      ValueChanged="@(async (x)=> await HandleInputChange(x.ToString()))"
                                      Immediate="true"
                                      Placeholder="Search tags"
                                      Class="pa-2" />
                    </MudContainer>
                    <MudContainer Class="px-6">
                        <MudChipSet MultiSelection="true" Filter="true">
                            @foreach (var item in filteredTags.Take(20))
                            {
                                var color = GetChipColor(item);
                                <MudChip SelectedColor="Color.Error" Color="color" Variant="Variant.Outlined" Text="@item" OnClick="() => ToggleChip(item)"></MudChip>
                            }
                            @if (filteredTags.Count() > 20)
                            {
                                if (!areTagsExpanded)
                                {
                                    <MudTooltip Placement="Placement.Right" Color="Color.Dark" Text="Show more">
                                        <MudIconButton Icon="@Icons.Material.Outlined.ExpandMore" Color="Color.Info" @onclick="ToggleTags" />
                                    </MudTooltip>
                                }
                                else
                                {
                                    foreach (var tag in filteredTags.Skip(20))
                                    {
                                        var color = GetChipColor(tag);
                                        <MudChip SelectedColor="Color.Error" Color="color" Variant="Variant.Outlined" Text="@tag" OnClick="() => ToggleChip(tag)"></MudChip>
                                    }
                                    <MudTooltip Placement="Placement.Right" Color="Color.Dark" Text="Show less">
                                        <MudIconButton Icon="@Icons.Material.Outlined.ExpandLess" Color="Color.Info" @onclick="ToggleTags" />
                                    </MudTooltip>
                                }
                            }
                            <MudTooltip Placement="Placement.Right" Color="Color.Dark" Text="Create a new tag">
                                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.AddCircle" OnClick="OpenDialog" />
                            </MudTooltip>
                        </MudChipSet>
                        <MudDivider />
                    </MudContainer>
                </MudContainer>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudForm>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" lg="10">
        <MudPaper Class="my-2 pa-2 mt-n2" Outlined="true">
            <MudButton Color="Color.Error" Variant="Variant.Filled" ButtonType="ButtonType.Submit" OnClick="SubmitPost">Create Post</MudButton>
            <MudButton Color="Color.Surface" Variant="Variant.Outlined" ButtonType="ButtonType.Button" OnClick="SubmitPost">Cancel</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.NewLabel" Class="mr-3" /> Create a new tag
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="newTag" Label="Tag name"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Close" Class="px-10">Cancel</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="Submit" Class="px-10">Create Tag</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string postTitle;
    private string postContent;
    private string selectedTag;
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool confirmationDialogVisible = false;

    private string searchText = "";
    private string newTag;
    private IList<string> tags = new List<string>();
    private bool areTagsExpanded = false;

    private IList<string> addedTags = new List<string>();
    private IList<string> filteredTags = new List<string>();

    private MudChip[] selected;
    private static Dictionary<string, Color> chipColors = new Dictionary<string, Color>();

    private bool visible;
    private DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };
    private void OpenDialog() => visible = true;
    private void Close() => visible = false;
    private async Task Submit()
    {
        visible = false;
        await CreateTag();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetTags();
        await FilterTags();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await TokenStorageService.RetrieveToken();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private Color GetChipColor(string tag)
    {
        if (!chipColors.ContainsKey(tag))
        {
            var randomColor = GetRandomColor();
            chipColors.Add(tag, randomColor);
        }

        return chipColors[tag];
    }

    private Color GetRandomColor()
    {
        var values = Enum.GetValues(typeof(Color));
        var random = new Random();
        var randomColor = (Color)values.GetValue(random.Next(values.Length));
        return randomColor;
    }

    private void ToggleChip(string tag)
    {
        if (addedTags.Contains(tag))
        {
            addedTags.Remove(tag);
        }
        else
        {
            addedTags.Add(tag);
        }
    }

    private void ToggleTags()
    {
        areTagsExpanded = !areTagsExpanded;
    }

    private async Task HandleInputChange(string value)
    {
        searchText = value;
        await FilterTags();
    }

    private async Task FilterTags()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            filteredTags = tags.ToList();
        }
        else
        {
            filteredTags = tags.Where(tag => tag.Contains(searchText)).ToList();
        }
        StateHasChanged();
    }

    private async Task SubmitPost()
    {
        var token = await TokenStorageService.RetrieveToken();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postRequest = new CreatePostRequest(
            postTitle,
            postContent,
            addedTags.ToList()
        );

        var response = await Http.PostAsJsonAsync("https://localhost:7050/api/posts", postRequest);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add("Post created successfully!", Severity.Success);
            var postResponse = await response.Content.ReadFromJsonAsync<PostResponse>();
            var postId = Guid.Parse(postResponse!.Id);
            NavigationManager.NavigateTo($"/post/{postId}");
        }
        else
        {
            // TODO: Handle error
        }
    }

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 150 < ch?.Length)
            yield return "Max 150 characters";
    }

    private IEnumerable<string> MaxCharactersContent(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 8192 < ch?.Length)
            yield return "Max 8192 characters";
    }

    private async Task<IEnumerable<string>> SearchTags(string search)
    {
        var response = await Http.GetAsync("https://localhost:7050/api/public/tags");
        var tags = await response.Content.ReadFromJsonAsync<List<TagsResponse>>();

        if (string.IsNullOrWhiteSpace(search))
            return tags.Select(t => t.Name);

        return tags
            .Where(x => x.Name.Contains(search, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Name);
    }

    private async Task GetTags()
    {
        var response = await Http.GetAsync("https://localhost:7050/api/public/tags");
        var tags = await response.Content.ReadFromJsonAsync<List<TagsResponse>>();
        this.tags = tags.Select(t => t.Name).ToList();
    }

    private void AddTag(string tag)
    {
        addedTags.Add(tag);
    }

    private async Task CreateTag()
    {
        if (string.IsNullOrWhiteSpace(newTag))
        {
            Snackbar.Add("Please enter a tag name.", Severity.Warning);
            return;
        }
        newTag = newTag.Trim();
        var request = new CreateTagRequest(newTag);
        var response = await Http.PostAsJsonAsync("https://localhost:7050/api/tags", request);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Tag {newTag} created successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Tag {newTag} could not be created.", Severity.Error);
        }
        newTag = string.Empty;
        await GetTags();
        await FilterTags();
        StateHasChanged();
    }

    //private void Closed(MudChip chip)
    //{
    //    addedTags.Remove(chip.Text);
    //}

    //private void ClearTags()
    //{
    //    addedTags.Clear();
    //}
}
