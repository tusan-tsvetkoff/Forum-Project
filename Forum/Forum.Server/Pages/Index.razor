@page "/"
@inject HttpClient HttpClient
@using Forum.Contracts.Statistics;
@using Forum.Server.Common.Interfaces;
@using MudBlazor;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject ITokenStorageService TokenStorageService
<PageTitle>Home</PageTitle>

<MudCard>
    <MudCardContent>
        <h2>Welcome to the Mystery Forum</h2>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardContent>
        <h3>Active Users: @UserCount</h3>
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardContent>
        <h3>Total Posts: @PostCount</h3>
    </MudCardContent>
</MudCard>


@code {
    private MudCarousel<int> _carousel;
    private IList<int> _source = new List<int>();
    private bool _autocycle = true;
    private bool _arrows = true;
    private bool _bullets = true;

    private int UserCount { get; set; }
    private int PostCount { get; set; }
    private bool IsAuthenticated { get; set; } = false;
    private string FirstName { get; set; }

    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Fade;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ProcessAuthenticationAsync();
            StateHasChanged();
        }
    }

    private async Task ProcessAuthenticationAsync()
    {
        // Fetch statistics (user count, post count) from the backend API

        var response = await HttpClient.GetAsync("https://localhost:7050/api/public/statistics");
        if (response.IsSuccessStatusCode)
        {
            var statistics = await response.Content.ReadFromJsonAsync<StatisticsResponse>();
            UserCount = statistics.TotalUsersCount;
            PostCount = statistics.TotalPostsCount;
            _source = new List<int> { UserCount, PostCount };
        }
        else
        {
            // Handle API error
        }
        // Check authentication status based on the presence of Authorization Bearer token
        var token = await TokenStorageService.RetrieveToken();
        IsAuthenticated = !string.IsNullOrEmpty(token);

        if (IsAuthenticated)
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
            FirstName = jsonToken!.Claims.First(claim => claim.Type == "given_name").Value;

            // Set the token in the authorization header for subsequent requests
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
    }
}
