@page "/"
@inject HttpClient HttpClient
@using Forum.Contracts.Statistics;
@using Forum.Server.Common.Interfaces;
@using MudBlazor;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject ITokenStorageService TokenStorageService
@inject NavigationManager NavigationManager
@using Forum.Server.Pages;

<style>
    .modern-text-style {
        font-family: 'Roboto', sans-serif;
        font-size: 20px;
        font-weight: bold;
        letter-spacing: 1px;
    }
</style>

<PageTitle>Home</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" lg="10">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h2">Welcome to the Mystery Forum</MudText>
                <MudText Typo="Typo.h5">A place where you can share your thoughts and ideas with the world</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" lg="8">
        <MudCarousel 
            Class="mud-width-full" @ref="_carousel" 
            ItemsSource="@_source" @bind-SelectedIndex="selectedIndex" 
            Style="height:200px;" 
            ShowArrows="true" 
            ShowBullets="true" 
            EnableSwipeGesture="true" 
            AutoCycle="false">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                    <MudIconButton 
                        Class="mx-auto" 
                        Icon="@Icons.Material.Filled.TableRows" 
                        Color="Color.Info" Href="@GetHref()" 
                        Size="@Size.Large" />
                    <MudText 
                        Align="@Align.Center" 
                        Class="modern-text-style mx-auto pointer-events-none">
                        @context
                    </MudText>
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudItem>

    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h3">Active Users</MudText>
                <MudText Typo="Typo.body1">@UserCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h3">Total Posts</MudText>
                <MudText Typo="Typo.body1">@PostCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>



@code {
    private MudCarousel<string> _carousel;
    private IList<string> _source = new List<string>() { "10 Most Commented Posts", "10 Most Recent Posts" };
    private bool _autocycle = true;
    private bool _arrows = true;
    private bool _bullets = true;
    private int selectedIndex = 0;

    private readonly string _tenMostCommentedPath = "/ten-most-commented";
    private readonly string _tenMostRecentPath = "/ten-most-recent";

    private int UserCount { get; set; }
    private int PostCount { get; set; }
    private bool IsAuthenticated { get; set; } = false;
    private string FirstName { get; set; }

    private Transition transition = Transition.Fade;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ProcessAuthenticationAsync();
            if (await TokenStorageService.CheckTokenExpiry() is true)
            {
                await TokenStorageService.RemoveToken();
                NavigationManager.NavigateTo("/login"); // TODO: Implement refresh token
            }
            StateHasChanged();
        }
    }

    private string GetHref()
    {
        return selectedIndex switch
        {
            0 => _tenMostCommentedPath,
            1 => _tenMostRecentPath,
            _ => throw new InvalidOperationException("Invalid index")
        };
    }

    private async Task ProcessAuthenticationAsync()
    {
        // Fetch statistics (user count, post count) from the backend API

        var response = await HttpClient.GetAsync("https://localhost:7050/api/public/statistics");
        if (response.IsSuccessStatusCode)
        {
            var statistics = await response.Content.ReadFromJsonAsync<StatisticsResponse>();
            UserCount = statistics.TotalUsersCount;
            PostCount = statistics.TotalPostsCount;
        }
        else
        {
            // Handle API error
        }
        // Check authentication status based on the presence of Authorization Bearer token
        var token = await TokenStorageService.RetrieveToken();
        IsAuthenticated = !string.IsNullOrEmpty(token);

        if (IsAuthenticated)
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
            FirstName = jsonToken!.Claims.First(claim => claim.Type == "given_name").Value;

            // Set the token in the authorization header for subsequent requests
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private void NavigateToTenMostCommented()
    {
        NavigationManager.NavigateTo("/ten-most-commented");
    }
}
