@page "/"
@inject HttpClient HttpClient
@using Forum.Server.Common.Interfaces;
@using MudBlazor;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject ITokenStorageService TokenStorageService
@inject NavigationManager NavigationManager
@inject IAPIClient APIClient
@inject ISnackbar Snackbar




<PageTitle>Home</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" lg="10">
        <MudContainer Class="d-flex justify-content-center">
            <MudImage Class="mx-auto " src="/mystery-forum-low-resolution-logo-white-on-transparent-background.png" Width="409" Height="270" ObjectPosition="ObjectPosition.Center" Alt="Mystery Logo" />
        </MudContainer>
    </MudItem>
    <MudItem xs="12" lg="8">
        <MudCarousel Class="mud-width-full" @ref="_carousel"
                     ItemsSource="@_source" @bind-SelectedIndex="selectedIndex"
                     Style="height:200px;"
                     ShowArrows="true"
                     ShowBullets="true"
                     EnableSwipeGesture="true"
                     AutoCycle="false">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                    <MudIconButton Class="mx-auto"
                                   Icon="@Icons.Material.Filled.TableRows"
                                   Color="Color.Info" Href="@GetHref()"
                                   Size="@Size.Large" />
                    <MudText Align="@Align.Center"
                             Class="modern-text-style mx-auto pointer-events-none">
                        @context
                    </MudText>
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudItem>

    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h3">Active Users</MudText>
                <MudText Typo="Typo.body1">@UserCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Total Posts</MudText>
                    <MudText Class="ml-2" Typo="Typo.body2">@PostCount posts and counting!</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>



@code {
    private MudCarousel<string>? _carousel;
    private IList<string> _source = new List<string>() { "10 Most Commented Posts", "10 Most Recent Posts" };
    private bool _autocycle = true;
    private bool _arrows = true;
    private bool _bullets = true;
    private int selectedIndex = 0;

    private readonly string _tenMostCommentedPath = "/ten-most-commented";
    private readonly string _tenMostRecentPath = "/ten-most-recent";

    private int UserCount { get; set; }
    private int PostCount { get; set; }
    private bool IsAuthenticated { get; set; } = false;
    private string? FirstName { get; set; }

    private Transition transition = Transition.Fade;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ProcessAuthenticationAsync();
            if (IsAuthenticated && await TokenStorageService.CheckTokenExpiry() is true) // this should be enough to check if the token is expired
            {
                await TokenStorageService.RemoveToken();
                NavigationManager.NavigateTo("/login");
            }
            StateHasChanged();
        }
    }

    private string GetHref()
    {
        return selectedIndex switch
        {
            0 => _tenMostCommentedPath,
            1 => _tenMostRecentPath,
            _ => throw new InvalidOperationException("Invalid index")
        };
    }

    private async Task ProcessAuthenticationAsync()
    {
        var response = await APIClient.GetStatisticsAsync();
        if (this.Snackbar.HandleResponse(response))
        {
            var statistics = response.Model;
            UserCount = statistics!.TotalUsersCount;
            PostCount = statistics.TotalPostsCount;
        }
        else
        {
            Snackbar.Add("There was an issue fetching statistics.", Severity.Error);
        }

        var token = await TokenStorageService.RetrieveToken();
        IsAuthenticated = !string.IsNullOrEmpty(token);

        if (IsAuthenticated)
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
            FirstName = jsonToken!.Claims.First(claim => claim.Type == "given_name").Value;

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            StateHasChanged();
        }
    }
}
