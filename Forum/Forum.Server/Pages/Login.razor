@page "/login"
@using System.ComponentModel.DataAnnotations;
@using Forum.Contracts.Authentication;
@using System.Net.Http.Headers;
@using Forum.Server.Common.Interfaces;
@using Forum.Server.Dialogs;
@using Microsoft.AspNetCore.Mvc;
@using System.Text.RegularExpressions;
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject ITokenStorageService TokenStorageService
@inject IAPIClient APIClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                @bind-Value="@_loginEmail" />
                <MudTextField T="string"
                              Label="Password" HelperText="Enter your password" InputType="InputType.Password"
                @bind-Value="@_loginPassword" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit" Class="ml-auto">Login</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private string? _loginEmail;
    private string? _loginPassword;

    bool success;
    string[] errors = { };
    private MudTextField<string> pwField1;
    private MudForm form;

    private async Task HandleValidSubmit()
    {
        // Create the registration request
        var loginRequest = new LoginRequest(
            _loginEmail!,
            _loginPassword!
        );

        var response = await APIClient.LoginRequestAsync(loginRequest);

        if (this.Snackbar.HandleResponse(response))
        {
            // Registration successful
            var authResult = response.Model;
            var token = authResult.Token;
            await TokenStorageService.StoreToken(token);
            Snackbar.Add($"Welcome back, {authResult.Username}!", Severity.Success);
            NavigationManager.NavigateTo("/");
            StateHasChanged();
        }
        else
        {
            Snackbar.Add($"Login failed!", Severity.Error);
        }
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<RegisterDialog>("Success!", options);
    }
}
