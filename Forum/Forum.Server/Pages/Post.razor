@page "/post/{postId:guid}"
@using Forum.Contracts.Comment;
@using Forum.Contracts.Post;
@using Forum.Server.Common.Interfaces;
@using System.Net.Http.Headers;
@using System.IdentityModel.Tokens.Jwt;
@inject HttpClient HttpClient
@inject ITokenStorageService TokenStorageService
@inject NavigationManager NavigationManager

<style>
    .comment-list {
        margin-top: 13px;
    }

    .comment {
        border-bottom: 1px solid #ccc;
        padding: 8px 0;
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 4px;
    }

    .comment-author {
        font-weight: bold;
    }

    .comment-date {
        color: #888;
    }

    .textarea-field textarea {
        height: 150px;
        width: 150px;
        resize: vertical;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
    }
</style>


<MudGrid Justify="Justify.Center">
    <MudItem xs="12" lg="11" Class="mb-n5">
        <MudCard>
            <MudCardHeader Class="pa-3 mb-n5">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">@PostTitle</MudText>
                    <MudText Typo="Typo.overline">Posted by u/@PostAuthor @TimeAgo(PostedDate)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudItem xs="12" lg="11" Class="mb-14 pt-n10 ml-n7">
                    <MudContainer>
                        <MudChipSet>
                            @if (PostTags is not null)
                            {
                                foreach (var item in PostTags.Take(2))
                                {
                                    <MudChip Color="Color.Default" Text="@item"></MudChip>
                                }
                                if (PostTags.Count > 2)
                                {
                                    if (!isExpanded)
                                    {
                                        <MudChip Color="Color.Info" OnClick="() => isExpanded = !isExpanded">Show @PostTags.Skip(2).Count() more</MudChip>
                                    }
                                    else
                                    {
                                        foreach (var item in PostTags.Skip(2))
                                        {
                                            <MudChip Color="Color.Default" Text="@item"></MudChip>
                                        }
                                        <MudChip Color="Color.Info" OnClick="() => isExpanded = !isExpanded">Show less</MudChip>
                                    }
                                }
                            }
                        </MudChipSet>
                    </MudContainer>
                </MudItem>
                <MudDivider />
                @if (isEditing)
                {
                    <MudTextField T="string"
                    @bind-Value="@PostContent"
                                  Class="mx-2 mb-1 textarea-field"
                                  Lines="5"
                                  Counter="8192"
                                  Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersContent))"
                                  Label="A mysterious edit.."
                                  Variant="Variant.Text" />
                }
                else
                {
                    <MudText Typo="Typo.body2" Class="mt-n6">@PostContent</MudText>
                }
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Default" />
                <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" Color="Color.Default" />
                <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                <MudNavLink Disabled="true" Icon="@Icons.Material.Filled.Comment">
                    @Comments?.Count
                    @(Comments?.Count == 1 ? "Comment" : "Comments")
                </MudNavLink>
                @if (isEditing is true)
                {
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Default">Submit</MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Color="Color.Default">Cancel</MudButton>
                }
                else
                {
                    <MudIconButton Disabled="@EditDeleteButtonsDisabled" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                    <MudIconButton Disabled="@EditDeleteButtonsDisabled" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" />
                }
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" lg="11" Class="mb-n2">
        <MudPaper>
            <MudTextField Class="mx-2 mb-1 textarea-field"
                          Lines="5"
                          Counter="250"
                          Immediate="true"
                          Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
            @bind-Value="newComment"
                          Label="Add a comment" Variant="Variant.Text" />
            <div class="button-container">
                <MudButton Color="Color.Primary" Class="mt-1 mb-2 mr-1" Variant="Variant.Filled" @onclick="()=> AddComment(postId)">Add Comment</MudButton>
            </div>
        </MudPaper>
    </MudItem>

    <!-- Comments Section -->
    <MudItem xs="12" lg="11">
        <MudCard>
            <MudCardContent>
                <div class="comment-list">
                    @if (Comments.Count <= 0)
                    {
                        <MudText Align="Align.Center" Typo="Typo.h6">No comments yet. Be the first to comment!</MudText>
                    }
                    else
                    {
                        foreach (var comment in Comments.OrderByDescending(c => c.Timestamp))
                        {
                            <div class="comment">
                                <div class="comment-header">
                                    <span class="comment-author">@comment.Author</span>
                                    <span class="comment-date">@comment.Timestamp</span>
                                </div>
                                <div class="comment-body">@comment.Content</div>
                            </div>
                        }
                    }
                </div>
            </MudCardContent>

        </MudCard>
    </MudItem>
</MudGrid>



@code {
    private List<PostCommentResponse> Comments = new();

    private string PostContent { get; set; }
    private string PostTitle { get; set; }
    private string PostAuthor { get; set; }
    private IList<string> PostTags { get; set; } = new List<string>();
    private DateTimeOffset PostedDate { get; set; }

    private bool IsAuthor { get; set; } = false;

    private bool IsLoggedIn { get; set; } = false;

    private bool EditDeleteButtonsDisabled { get; set; } = true;

    private string newComment;

    private bool isEditing = false;

    private bool isExpanded = false;

    [Parameter]
    public Guid postId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPostData();
            StateHasChanged();
        }
    }

    private async Task EditPost()
    {
        var token = await TokenStorageService.RetrieveToken();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/unauthorized");
        }

        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);


    }

    private async Task LoadPostData()
    {
        var token = await TokenStorageService.RetrieveToken();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/unauthorized");
        }

        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await HttpClient.GetAsync($"https://localhost:7050/api/posts/{postId}");

        if (response.IsSuccessStatusCode)
        {
            var post = await response.Content.ReadFromJsonAsync<PostResponse>();
            Comments = post.Comments;
            PostContent = post.Content;
            PostTitle = post.Title;
            PostAuthor = post.Author.Username;
            var tempDate = post.CreatedDateTime;
            tempDate = DateTime.SpecifyKind(tempDate, DateTimeKind.Utc);
            PostedDate = tempDate;
            PostTags = post.Tags;

            var clientUsername = await RetrieveUsername(token);
            IsAuthor = IsAuthorOfPost(clientUsername);
            if (IsAuthor || clientUsername == "admin")
            {
                EditDeleteButtonsDisabled = false;
            }
        }
    }

    // TODO: Add Comments
    private async Task AddComment(Guid postId)
    {
        var request = new CreateCommentRequest(newComment);

        var response = await HttpClient.PostAsJsonAsync($"https://localhost:7050/api/posts/{postId}/comments", request);

        if (response.IsSuccessStatusCode)
        {
            var comment = await response.Content.ReadFromJsonAsync<CommentResponse>();
            newComment = string.Empty;
            await LoadPostData();
        }
    }

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 250 < ch?.Length)
            yield return "Max 250 characters";
    }

    private string TimeAgo(DateTimeOffset dateTimeOffset)
    {
        var timeSpan = DateTimeOffset.UtcNow - dateTimeOffset;

        if (timeSpan.Days > 365)
        {
            int years = (timeSpan.Days / 365);
            if (timeSpan.Days % 365 != 0)
                years += 1;
            return $"{years} {(years == 1 ? "year" : "years")} ago";
        }
        if (timeSpan.Days > 30)
        {
            int months = (timeSpan.Days / 30);
            if (timeSpan.Days % 31 != 0)
                months += 1;
            return $"{months} {(months == 1 ? "month" : "months")} ago";
        }
        if (timeSpan.Days > 0)
            return $"{timeSpan.Days} {(timeSpan.Days == 1 ? "day" : "days")} ago";
        if (timeSpan.Hours > 0)
            return $"{timeSpan.Hours} {(timeSpan.Hours == 1 ? "hour" : "hours")} ago";
        if (timeSpan.Minutes > 0)
            return $"{timeSpan.Minutes} {(timeSpan.Minutes == 1 ? "minute" : "minutes")} ago";
        if (timeSpan.Seconds > 5)
            return $"{timeSpan.Seconds} seconds ago";

        return "just now";
    }

    private void NavigateToEditPost(Guid postId)
    {
        NavigationManager.NavigateTo($"/editpost/{postId}");
    }

    private void NavigateToDeletePost(Guid postId)
    {
        NavigationManager.NavigateTo($"/deletepost/{postId}");
    }

    private bool IsAuthorOfPost(string clientUsername) => clientUsername == PostAuthor ? true : false;

    private async Task<string> RetrieveUsername(string token)
    {
        SetBearerToken(HttpClient, token);
        var username = ExtractUsernameFromToken(token);
        return username;
    }

    // TODO: Create a helper class and encapsulate this method
    public static void SetBearerToken(HttpClient httpClient, string token)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    public static string ExtractUsernameFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
        var usernameClaim = jsonToken?.Claims.FirstOrDefault(claim => claim.Type == "unique_name");
        var username = usernameClaim?.Value;
        return username;
    }

    private IEnumerable<string> MaxCharactersContent(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 8192 < ch?.Length)
            yield return "Max 8192 characters";
    }
}
