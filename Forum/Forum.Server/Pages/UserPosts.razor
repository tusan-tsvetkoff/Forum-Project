@inject HttpClient HttpClient
@using Forum.Contracts.Post
@using Forum.Server.Common.Interfaces;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@using System.Web;
@using Microsoft.AspNetCore.WebUtilities;
@page "/your-posts"
@inject ITokenStorageService TokenStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .table-row {
        transition: background-color 0.3s;
    }

        .table-row:hover {
        }

    .post-card {
        border-radius: 4px;
        padding: 16px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .post-card-title {
        font-weight: 600;
        font-size: 20px;
        margin-bottom: 8px;
    }

    .post-card-content {
        font-size: 14px;
        margin-bottom: 16px;
    }

    .post-card-details {
        font-size: 12px;
    }

    .post-card-details-item {
        margin-right: 16px;
    }

    .post-card-title a:hover,
    .post-card-title a:focus {
        text-decoration: underline;
    }
</style>

<PageTitle>@FirstName 's Posts</PageTitle>

<MudTable Items="@Posts?.Posts" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Content</MudTh>
        <MudTh>Likes</MudTh>
        <MudTh>Dislikes</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ToggleDetails(context.Id))">
                Show
                @(IsExpanded(context.Id) ? "Less" : "More")
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Title">
            <div class="post-card-title">
                <a href="/post/@context.Id">@context.Title</a>
            </div>
        </MudTd>
        <MudTd DataLabel="Content">
            <MudText Class="post-card-content">@context.Content.Substring(0, Math.Min(context.Content.Length, 30))</MudText>
        </MudTd>
        <MudTd DataLabel="Likes">@context.Likes.Amount</MudTd>
        <MudTd DataLabel="Dislikes">@context.Dislikes.Amount</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (IsExpanded(context.Id))
        {
            <MudTr>
                <td colspan="5">
                    <div class="post-card">
                        <div class="post-card-title">@context.Title</div>
                        <div class="post-card-content">Content: @context.Content</div>
                        <div class="post-card-details">
                            <div class="post-card-details-item">Likes: @context.Likes.Amount</div>
                            <div class="post-card-details-item">Dislikes: @context.Dislikes.Amount</div>
                            <div class="post-card-details-item">Comments: @context.Comments</div>
                            <div class="post-card-details-item">Posted at: @context.Timestamp</div>
                            <div class="post-card-details-item">Last edited at: @context.EditedTimestamp</div>
                        </div>
                    </div>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code
{
    private PostResponseListNew? Posts { get; set; }
    private Dictionary<string, bool> ExpandedStates { get; set; } = new Dictionary<string, bool>();
    private bool IsLoggedIn { get; set; } = false;
    private string FirstName { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await TokenStorageService.RetrieveToken() is string token)
            {
                IsLoggedIn = true;
                var handler = new JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
                FirstName = jsonToken!.Claims.First(claim => claim.Type == "given_name").Value;
                await GetMostCommentedAsync(token);
            }
            StateHasChanged();
        }
    }

    private async Task GetMostCommentedAsync(string token)
    {
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
        var username = jsonToken!.Claims.First(claim => claim.Type == "unique_name").Value;

        var queryParameters = new Dictionary<string, string>();

        if (!string.IsNullOrEmpty(username))
        {
            queryParameters["username"] = username;
        }

        queryParameters["page"] = "1";
        queryParameters["pageSize"] = "10";

        var baseUri = new Uri("https://localhost:7050/api/posts");
        var requestUrl = QueryHelpers.AddQueryString(baseUri.ToString(), queryParameters);

        var response = await HttpClient.GetAsync(requestUrl);

        if (response.IsSuccessStatusCode)
        {
            var postResponseList = await response.Content.ReadFromJsonAsync<PostResponseListNew>();
            Posts = postResponseList;
        }
    }

    private bool IsExpanded(string postId)
    {
        return ExpandedStates.ContainsKey(postId) && ExpandedStates[postId];
    }

    private void ToggleDetails(string postId)
    {
        if (ExpandedStates.ContainsKey(postId))
        {
            ExpandedStates[postId] = !ExpandedStates[postId];
        }
        else
        {
            ExpandedStates.Add(postId, true);
        }
    }
}
